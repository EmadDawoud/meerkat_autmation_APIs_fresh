/*
 * Meerkat Automation APIs
 * This API for quering and adding Meerkat SNMP Devices
 *
 * OpenAPI spec version: 1.1.0
 * Contact: emad.dawoud@telus.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {MonObj} from './MonObj';

/**
 * The Device model module.
 * @module model/Device
 * @version 1.1.0
 */
export class Device {
  /**
   * Constructs a new <code>Device</code>.
   * @alias module:model/Device
   * @class
   * @param vendor {Object} 
   * @param province {Object} 
   * @param sNMPCollector {Object} 
   * @param kPIStats {Object} 
   * @param deviceType {Object} 
   * @param communityStr {Object} 
   * @param monObj {Array.<module:model/MonObj>} 
   */
  constructor(vendor, province, sNMPCollector, kPIStats, deviceType, communityStr, monObj) {
    this.vendor = vendor;
    this.province = province;
    this.sNMPCollector = sNMPCollector;
    this.kPIStats = kPIStats;
    this.deviceType = deviceType;
    this.communityStr = communityStr;
    this.monObj = monObj;
  }

  /**
   * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Device} obj Optional instance to populate.
   * @return {module:model/Device} The populated <code>Device</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Device();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('wname'))
        obj.wname = ApiClient.convertToType(data['wname'], 'String');
      if (data.hasOwnProperty('model'))
        obj.model = ApiClient.convertToType(data['model'], 'String');
      if (data.hasOwnProperty('vendor'))
        obj.vendor = ApiClient.convertToType(data['vendor'], Object);
      if (data.hasOwnProperty('ip'))
        obj.ip = ApiClient.convertToType(data['ip'], 'String');
      if (data.hasOwnProperty('communitystr'))
        obj.communitystr = ApiClient.convertToType(data['communitystr'], 'String');
      if (data.hasOwnProperty('devicetype'))
        obj.devicetype = ApiClient.convertToType(data['devicetype'], 'String');
      if (data.hasOwnProperty('province'))
        obj.province = ApiClient.convertToType(data['province'], Object);
      if (data.hasOwnProperty('snmpcollector'))
        obj.snmpcollector = ApiClient.convertToType(data['snmpcollector'], 'String');
      if (data.hasOwnProperty('kpistats'))
        obj.kpistats = ApiClient.convertToType(data['kpistats'], 'String');
      if (data.hasOwnProperty('monobj'))
        obj.monobj = ApiClient.convertToType(data['monobj'], 'String');
      if (data.hasOwnProperty('sNMPCollector'))
        obj.sNMPCollector = ApiClient.convertToType(data['sNMPCollector'], Object);
      if (data.hasOwnProperty('kPIStats'))
        obj.kPIStats = ApiClient.convertToType(data['kPIStats'], Object);
      if (data.hasOwnProperty('deviceType'))
        obj.deviceType = ApiClient.convertToType(data['deviceType'], Object);
      if (data.hasOwnProperty('communityStr'))
        obj.communityStr = ApiClient.convertToType(data['communityStr'], Object);
      if (data.hasOwnProperty('monObj'))
        obj.monObj = ApiClient.convertToType(data['monObj'], [MonObj]);
    }
    return obj;
  }
}

/**
 * missing description
 * @member {Number} id
 */
Device.prototype.id = undefined;

/**
 * missing description
 * @member {String} name
 */
Device.prototype.name = undefined;

/**
 * missing description
 * @member {String} wname
 */
Device.prototype.wname = undefined;

/**
 * missing description
 * @member {String} model
 */
Device.prototype.model = undefined;

/**
 * @member {Object} vendor
 */
Device.prototype.vendor = undefined;

/**
 * missing description
 * @member {String} ip
 */
Device.prototype.ip = undefined;

/**
 * missing description
 * @member {String} communitystr
 */
Device.prototype.communitystr = undefined;

/**
 * missing description
 * @member {String} devicetype
 */
Device.prototype.devicetype = undefined;

/**
 * @member {Object} province
 */
Device.prototype.province = undefined;

/**
 * missing description
 * @member {String} snmpcollector
 */
Device.prototype.snmpcollector = undefined;

/**
 * missing description
 * @member {String} kpistats
 */
Device.prototype.kpistats = undefined;

/**
 * missing description
 * @member {String} monobj
 */
Device.prototype.monobj = undefined;

/**
 * @member {Object} sNMPCollector
 */
Device.prototype.sNMPCollector = undefined;

/**
 * @member {Object} kPIStats
 */
Device.prototype.kPIStats = undefined;

/**
 * @member {Object} deviceType
 */
Device.prototype.deviceType = undefined;

/**
 * @member {Object} communityStr
 */
Device.prototype.communityStr = undefined;

/**
 * @member {Array.<module:model/MonObj>} monObj
 */
Device.prototype.monObj = undefined;

