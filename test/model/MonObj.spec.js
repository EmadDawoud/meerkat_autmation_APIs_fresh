/*
 * Meerkat Automation APIs
 * This API for quering and adding Meerkat SNMP Devices
 *
 * OpenAPI spec version: 2.0.0
 * Contact: emad.dawoud@telus.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MeerkatAutomationApis);
  }
}(this, function(expect, MeerkatAutomationApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MonObj', function() {
      beforeEach(function() {
        instance = new MeerkatAutomationApis.MonObj();
      });

      it('should create an instance of MonObj', function() {
        // TODO: update the code to test MonObj
        expect(instance).to.be.a(MeerkatAutomationApis.MonObj);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property oid (base name: "oid")', function() {
        // TODO: update the code to test the property oid
        expect(instance).to.have.property('oid');
        // expect(instance.oid).to.be(expectedValueLiteral);
      });

      it('should have the property snmpmib (base name: "snmpmib")', function() {
        // TODO: update the code to test the property snmpmib
        expect(instance).to.have.property('snmpmib');
        // expect(instance.snmpmib).to.be(expectedValueLiteral);
      });

      it('should have the property sNMPMIB (base name: "sNMPMIB")', function() {
        // TODO: update the code to test the property sNMPMIB
        expect(instance).to.have.property('sNMPMIB');
        // expect(instance.sNMPMIB).to.be(expectedValueLiteral);
      });

      it('should have the property metric (base name: "metric")', function() {
        // TODO: update the code to test the property metric
        expect(instance).to.have.property('metric');
        // expect(instance.metric).to.be(expectedValueLiteral);
      });

    });
  });

}));
