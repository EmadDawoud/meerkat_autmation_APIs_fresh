/*
 * Meerkat Automation APIs
 * This API for quering and adding Meerkat SNMP Devices
 *
 * OpenAPI spec version: 2.0.0
 * Contact: emad.dawoud@telus.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MeerkatAutomationApis);
  }
}(this, function(expect, MeerkatAutomationApis) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Device', function() {
      beforeEach(function() {
        instance = new MeerkatAutomationApis.Device();
      });

      it('should create an instance of Device', function() {
        // TODO: update the code to test Device
        expect(instance).to.be.a(MeerkatAutomationApis.Device);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property wname (base name: "wname")', function() {
        // TODO: update the code to test the property wname
        expect(instance).to.have.property('wname');
        // expect(instance.wname).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property vendor (base name: "vendor")', function() {
        // TODO: update the code to test the property vendor
        expect(instance).to.have.property('vendor');
        // expect(instance.vendor).to.be(expectedValueLiteral);
      });

      it('should have the property ip (base name: "ip")', function() {
        // TODO: update the code to test the property ip
        expect(instance).to.have.property('ip');
        // expect(instance.ip).to.be(expectedValueLiteral);
      });

      it('should have the property communitystr (base name: "communitystr")', function() {
        // TODO: update the code to test the property communitystr
        expect(instance).to.have.property('communitystr');
        // expect(instance.communitystr).to.be(expectedValueLiteral);
      });

      it('should have the property devicetype (base name: "devicetype")', function() {
        // TODO: update the code to test the property devicetype
        expect(instance).to.have.property('devicetype');
        // expect(instance.devicetype).to.be(expectedValueLiteral);
      });

      it('should have the property province (base name: "province")', function() {
        // TODO: update the code to test the property province
        expect(instance).to.have.property('province');
        // expect(instance.province).to.be(expectedValueLiteral);
      });

      it('should have the property snmpcollector (base name: "snmpcollector")', function() {
        // TODO: update the code to test the property snmpcollector
        expect(instance).to.have.property('snmpcollector');
        // expect(instance.snmpcollector).to.be(expectedValueLiteral);
      });

      it('should have the property kpinum (base name: "kpinum")', function() {
        // TODO: update the code to test the property kpinum
        expect(instance).to.have.property('kpinum');
        // expect(instance.kpinum).to.be(expectedValueLiteral);
      });

      it('should have the property monobj (base name: "monobj")', function() {
        // TODO: update the code to test the property monobj
        expect(instance).to.have.property('monobj');
        // expect(instance.monobj).to.be(expectedValueLiteral);
      });

      it('should have the property sNMPCollector (base name: "sNMPCollector")', function() {
        // TODO: update the code to test the property sNMPCollector
        expect(instance).to.have.property('sNMPCollector');
        // expect(instance.sNMPCollector).to.be(expectedValueLiteral);
      });

    });
  });

}));
